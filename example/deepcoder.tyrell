# types to be considered
enum fn_pool {
	"pos", "neg", "plus", "minus", "mul", "div", "pow", "gt_zero", "lt_zero", "is_even", "is_odd"
}
enum mfn_pool {
	"plus", "minus", "mul", "div", "pow"
}
enum int_pool {
	"-5", "-4", "-3", "-2", "-1", "0", "1", "2", "3", "4", "5"
}
value int;
value array;
value fn;
value bool;
value Empty;

# input/output of the synthesized program
program deepcoder1(array, array) -> int;

# empty rule
func empty: Empty -> Empty;
func get_mfn: fn -> mfn_pool, int_pool;
func get_fn: fn -> fn_pool;
func get_int: int -> int_pool;

# first-order functions
func head: int -> array;
func last: int -> array;
func take: array -> int, array; 
func drop: array -> int, array;
func access: int -> int, array;
func minimum: int -> array;
func maximum: int -> array;
func reverse: array -> array;
func sort: array -> array;
func sum: int -> array;

# higher-order functions
func map: array -> fn, array;
func filter: array -> fn, array;
func count: int -> fn, array;
func zipwith: array -> fn, array, array;
func scanl1: array -> fn, array;

# basic arithmetics
func pos: int -> int;
func neg: int -> int;
func plus: int -> int, int;
func minus: int -> int, int;
func mul: int -> int, int;
func div: int -> int, int; # could result in float/double, use floor for simplification
func pow: int -> int, int; # restrict the power to non-negative int
func gt_zero: bool -> int;
func lt_zero: bool -> int;
func is_even: bool -> int;
func is_odd: bool -> int; 

# for quick testing
predicate is_parent(maximum, zipwith, 100);
predicate is_parent(zipwith, get_fn, 100);
predicate is_parent(zipwith, map, 100);
predicate is_parent(map, get_mfn, 100);
predicate occurs(maximum, 100);
predicate occurs(zipwith, 100);
predicate occurs(map, 100);
predicate occurs(get_mfn, 100);
predicate occurs(get_fn, 100);